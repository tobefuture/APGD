temp_beta <- (sum(abs(diff_beta) >= crit_beta) == 0)
temp_obj <- (abs(obj[k+1] - obj[k]) < crit_obj)
temp <- (1 - temp_beta) * (1 - temp_obj)
if (k>1 && temp==0){
break
}
}
if (k == niter){
print("Waining: Setting number of iterations doesn't reach to the convergency. Please set larger 'niter'!")
}
beta_hat <- beta_est[,k]
} else {   # - CVX
# if (!requireNamespace("CVXR", quietly = TRUE)) install.packages("CVXR")
library(CVXR)
n_variant <- ncol(X)
beta_lasso <- Variable(n_variant)
obj_lasso <- (sum_squares(y - X %*% beta_lasso) + 2 * t(t(X) %*% y-adjSC) %*% beta_lasso)/n + lambda0*p_norm(beta_lasso, 1)
prob <- Problem(Minimize(obj_lasso))
result <- CVXR::solve(prob)
beta_hat <- result[[1]]
}
return(beta_hat)
}
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE)
plot(a)
#' @param niter the maximum number of APGD to solve Lasso regression. default: 2000
#' @param crit_beta converge criterion of change of beta. default: 1e-4
#' @param crit_obj converge criterion of change of objective function. default: 1e-8
#' @param quiet decide if exist the output report. default: FALSE
#'
#' @return beta: m length vector of estimated effect sizes, where beta_j != 0 indicates j th SNP is selected in adjusted Lasso regression.
#' @export
#'
#' @examples
#'
adjLasso_Beta <- function(X, y, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE){
X <- data.matrix(X)
y <- data.matrix(y)
# ---- check X y
if (nrow(X) != nrow(y)){
stop("Error: Please check the sample size of X and y. They should be the same!")
} else if (ncol(y) != 1){
stop("Error: Please check the dimension of y. It should be n*1 vector!")
}
# ---- check lambda0
if (lambda0 <= 0){
stop("Error: Lambda shoud be lager than 0!")
}
# ---- check gamma
if (gamma <= 0){
stop("Error: Gamma shoud be lager than 0!")
}
# --- check method
if (method != "APGD" && method != "CVX"){
stop("Error: The current methods must be 'APGD' or 'CVX'!")
}
####### Setting:
n <- nrow(X)
p <- ncol(X)
if (quiet == FALSE){
print(paste("Start calculating beta using adjusted Lasso by :", method))
}
# - APGD
if (method == "APGD"){
beta_est <- matrix(NA, nrow = ncol(X), ncol = niter+2)
colnames(beta_est) <- paste("beta", seq(0, niter+1))
obj <- numeric(niter+1)
beta_est[,"beta 0"] <- beta_est[,"beta 1"] <- 0
for (k in 1:niter){
beta_k <- beta_est[,paste("beta", k)]
z <- y - X %*% beta_k
obj[k] <- (sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_k)/n + lambda0*sum(abs(beta_k))
ksi <- beta_est[,paste("beta", k)] + k/(k+3) * (beta_est[,paste("beta", k)] - beta_est[,paste("beta", k-1)])
g_grad_ksi <- (2*t(X) %*% X %*% ksi - 2*adjSC)/n
g_grad_ksi <- data.matrix(g_grad_ksi)
while (TRUE){
theta <- ksi - gamma * g_grad_ksi
beta_prox <- sign(theta) * pmax(abs(theta)-gamma*lambda0, 0)
g_ksi <- (sum((y - X %*% ksi)^2) + 2*(t(y)%*%X - t(adjSC))%*%ksi)/n
g_beta_prox <- (sum((y - X %*% beta_prox)^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox)/n
g_hat_upper <- g_ksi + t(g_grad_ksi)%*%(beta_prox-ksi) + 0.5/gamma*sum((beta_prox-ksi)^2)
if (g_beta_prox <= g_hat_upper){
break
} else {
gamma <- 0.5*gamma
}
}
beta_est[,paste("beta", k+1)] <- beta_prox
z <- y - X %*% beta_prox
obj[k+1] <-  (sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox)/n + lambda0*sum(abs(beta_prox))
diff_beta <- beta_prox - beta_est[,paste("beta", k)]
temp_beta <- (sum(abs(diff_beta) >= crit_beta) == 0)
temp_obj <- (abs(obj[k+1] - obj[k]) < crit_obj)
temp <- (1 - temp_beta) * (1 - temp_obj)
if (k>1 && temp==0){
break
}
}
if (k == niter){
print("Waining: Setting number of iterations doesn't reach to the convergency. Please set larger 'niter'!")
}
beta_hat <- beta_est[,k]
} else {   # - CVX
# if (!requireNamespace("CVXR", quietly = TRUE)) install.packages("CVXR")
library(CVXR)
n_variant <- ncol(X)
beta_lasso <- Variable(n_variant)
obj_lasso <- (sum_squares(y - X %*% beta_lasso) + 2 * t(t(X) %*% y-adjSC) %*% beta_lasso)/n + lambda0*p_norm(beta_lasso, 1)
prob <- Problem(Minimize(obj_lasso))
result <- CVXR::solve(prob)
beta_hat <- result[[1]]
}
return(beta_hat)
}
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE)
plot(a)
X=genotype
y=phenotype
####### Setting:
n <- nrow(X)
p <- ncol(X)
beta_est <- matrix(NA, nrow = ncol(X), ncol = niter+2)
colnames(beta_est) <- paste("beta", seq(0, niter+1))
obj <- numeric(niter+1)
beta_est[,"beta 0"] <- beta_est[,"beta 1"] <- 0
for (k in 1:niter){
beta_k <- beta_est[,paste("beta", k)]
z <- y - X %*% beta_k
obj[k] <- (sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_k)/n + lambda0*sum(abs(beta_k))
ksi <- beta_est[,paste("beta", k)] + k/(k+3) * (beta_est[,paste("beta", k)] - beta_est[,paste("beta", k-1)])
g_grad_ksi <- (2*t(X) %*% X %*% ksi - 2*adjSC)/n
g_grad_ksi <- data.matrix(g_grad_ksi)
while (TRUE){
theta <- ksi - gamma * g_grad_ksi
beta_prox <- sign(theta) * pmax(abs(theta)-gamma*lambda0, 0)
g_ksi <- (sum((y - X %*% ksi)^2) + 2*(t(y)%*%X - t(adjSC))%*%ksi)/n
g_beta_prox <- (sum((y - X %*% beta_prox)^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox)/n
g_hat_upper <- g_ksi + t(g_grad_ksi)%*%(beta_prox-ksi) + 0.5/gamma*sum((beta_prox-ksi)^2)
if (g_beta_prox <= g_hat_upper){
break
} else {
gamma <- 0.5*gamma
}
}
beta_est[,paste("beta", k+1)] <- beta_prox
z <- y - X %*% beta_prox
obj[k+1] <-  (sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox)/n + lambda0*sum(abs(beta_prox))
diff_beta <- beta_prox - beta_est[,paste("beta", k)]
temp_beta <- (sum(abs(diff_beta) >= crit_beta) == 0)
temp_obj <- (abs(obj[k+1] - obj[k]) < crit_obj)
temp <- (1 - temp_beta) * (1 - temp_obj)
if (k>1 && temp==0){
break
}
}
obj
obj[1]
beta_est <- matrix(NA, nrow = ncol(X), ncol = niter+2)
colnames(beta_est) <- paste("beta", seq(0, niter+1))
obj <- numeric(niter+1)
beta_est[,"beta 0"] <- beta_est[,"beta 1"] <- 0
for (k in 1:niter){
beta_k <- beta_est[,paste("beta", k)]
z <- y - X %*% beta_k
obj[k] <- sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_k + lambda0*sum(abs(beta_k))
ksi <- beta_est[,paste("beta", k)] + k/(k+3) * (beta_est[,paste("beta", k)] - beta_est[,paste("beta", k-1)])
g_grad_ksi <- 2*t(X) %*% X %*% ksi - 2*adjSC
g_grad_ksi <- data.matrix(g_grad_ksi)
while (TRUE){
theta <- ksi - gamma * g_grad_ksi
beta_prox <- sign(theta) * pmax(abs(theta)-gamma*lambda0, 0)
g_ksi <- sum((y - X %*% ksi)^2) + 2*(t(y)%*%X - t(adjSC))%*%ksi
g_beta_prox <- sum((y - X %*% beta_prox)^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox
g_hat_upper <- g_ksi + t(g_grad_ksi)%*%(beta_prox-ksi) + 0.5/gamma*sum((beta_prox-ksi)^2)
if (g_beta_prox <= g_hat_upper){
break
} else {
gamma <- 0.5*gamma
}
}
beta_est[,paste("beta", k+1)] <- beta_prox
z <- y - X %*% beta_prox
obj[k+1] <-  sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox + lambda0*sum(abs(beta_prox))
diff_beta <- beta_prox - beta_est[,paste("beta", k)]
temp_beta <- (sum(abs(diff_beta) >= crit_beta) == 0)
temp_obj <- (abs(obj[k+1] - obj[k]) < crit_obj)
temp <- (1 - temp_beta) * (1 - temp_obj)
if (k>1 && temp==0){
break
}
}
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE)
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=0, crit_obj=1e-8, quiet=FALSE)
genotype <- read.csv("genotype_10000.csv")[,-1]
genotype <- as.matrix(genotype)
# ---our
###### generate phenotype #####
causal_rate <- 0.1
cc_ratio <- 0.001
n_ind <- nrow(genotype)
n_variant <- ncol(genotype)
temp <- generate_pheno(genotype,causal_rate,cc_ratio)
phenotype <- temp[[1]]
causal_index <- temp[[2]]
### adjust_SC or not(x^t*y)
SC_adjust_or_not <- function(genotype,phenotype,is_adjust_SC){
n_ind <- nrow(genotype)
n_variant <- ncol(genotype)
if (is_adjust_SC==TRUE) {
#calculate the pvalue through SPA
p_value <- SPAtest:::ScoreTest_SPA(genos = t(genotype), pheno = phenotype,method = "SPA")$p.value
#calculate adjust_SC
nxy <- n_ind * apply(genotype,2,mean) * mean(phenotype)
sign_SC <- sign(t(genotype) %*% phenotype - nxy)
sigma <- sqrt(sum((phenotype-mean(phenotype))^2) * apply(genotype,2,FUN = function(x){sum((x-mean(x))^2)})/n_ind)
adj_SC<- sign_SC * sigma * sqrt(qchisq(p = p_value,df = 1, lower.tail = FALSE)) + nxy
output <- adj_SC
}else{
output <-t(genotype) %*% phenotype
}
return(output)
}
generate_pheno <- function(genotype,causal_rate,cc_ratio){
n_ind <- nrow(genotype)
n_variant <- ncol(genotype)
##### generate beta effect size #####
# causal_rate <- 0.1
causal_index <- sample(c(1:n_variant), ceiling(n_variant * causal_rate), replace = FALSE)
beta <- as.matrix(rep(0, n_variant))
beta[causal_index] <- 1
###### generate phenotype #####
# cc_ratio: the proportion of case
# cc_ratio <- 0.1
phenotype <- genotype %*% beta + rnorm(n_ind, 0, 0.3)
phenotype <- as.numeric(phenotype > sort(phenotype, decreasing = TRUE)[floor(n_ind * cc_ratio)])
phenotype <- as.matrix(phenotype)
colnames(phenotype) <- c("phe")
# # center the phenotype
# phenotype <- scale(phenotype, scale = FALSE)
return(list(phenotype,causal_index))
}
temp <- generate_pheno(genotype,causal_rate,cc_ratio)
phenotype <- temp[[1]]
causal_index <- temp[[2]]
beta_orig <- rep(0,n_variant)
beta_orig[causal_index] <- 1
adjSC <- SC_adjust_or_not(genotype,phenotype,TRUE)
lambda0 = 100
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE)
#' @param niter the maximum number of APGD to solve Lasso regression. default: 2000
#' @param crit_beta converge criterion of change of beta. default: 1e-4
#' @param crit_obj converge criterion of change of objective function. default: 1e-8
#' @param quiet decide if exist the output report. default: FALSE
#'
#' @return beta: m length vector of estimated effect sizes, where beta_j != 0 indicates j th SNP is selected in adjusted Lasso regression.
#' @export
#'
#' @examples
#'
adjLasso_Beta <- function(X, y, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE){
X <- data.matrix(X)
y <- data.matrix(y)
# ---- check X y
if (nrow(X) != nrow(y)){
stop("Error: Please check the sample size of X and y. They should be the same!")
} else if (ncol(y) != 1){
stop("Error: Please check the dimension of y. It should be n*1 vector!")
}
# ---- check lambda0
if (lambda0 <= 0){
stop("Error: Lambda shoud be lager than 0!")
}
# ---- check gamma
if (gamma <= 0){
stop("Error: Gamma shoud be lager than 0!")
}
# --- check method
if (method != "APGD" && method != "CVX"){
stop("Error: The current methods must be 'APGD' or 'CVX'!")
}
####### Setting:
n <- nrow(X)
p <- ncol(X)
if (quiet == FALSE){
print(paste("Start calculating beta using adjusted Lasso by :", method))
}
# - APGD
if (method == "APGD"){
beta_est <- matrix(NA, nrow = ncol(X), ncol = niter+2)
colnames(beta_est) <- paste("beta", seq(0, niter+1))
obj <- numeric(niter+1)
beta_est[,"beta 0"] <- beta_est[,"beta 1"] <- 0
for (k in 1:niter){
beta_k <- beta_est[,paste("beta", k)]
z <- y - X %*% beta_k
obj[k] <- sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_k + lambda0*sum(abs(beta_k))
ksi <- beta_est[,paste("beta", k)] + k/(k+3) * (beta_est[,paste("beta", k)] - beta_est[,paste("beta", k-1)])
g_grad_ksi <- 2*t(X) %*% X %*% ksi - 2*adjSC
g_grad_ksi <- data.matrix(g_grad_ksi)
while (TRUE){
theta <- ksi - gamma * g_grad_ksi
beta_prox <- sign(theta) * pmax(abs(theta)-gamma*lambda0, 0)
g_ksi <- sum((y - X %*% ksi)^2) + 2*(t(y)%*%X - t(adjSC))%*%ksi
g_beta_prox <- sum((y - X %*% beta_prox)^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox
g_hat_upper <- g_ksi + t(g_grad_ksi)%*%(beta_prox-ksi) + 0.5/gamma*sum((beta_prox-ksi)^2)
if (g_beta_prox <= g_hat_upper){
break
} else {
gamma <- 0.5*gamma
}
}
beta_est[,paste("beta", k+1)] <- beta_prox
z <- y - X %*% beta_prox
obj[k+1] <-  sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox + lambda0*sum(abs(beta_prox))
diff_beta <- beta_prox - beta_est[,paste("beta", k)]
temp_beta <- (sum(abs(diff_beta) >= crit_beta) == 0)
temp_obj <- (abs(obj[k+1] - obj[k]) < crit_obj)
temp <- (1 - temp_beta) * (1 - temp_obj)
if (k>1 && temp==0){
break
}
}
if (k == niter){
print("Waining: Setting number of iterations doesn't reach to the convergency. Please set larger 'niter'!")
}
beta_hat <- beta_est[,k]
} else {   # - CVX
# if (!requireNamespace("CVXR", quietly = TRUE)) install.packages("CVXR")
library(CVXR)
n_variant <- ncol(X)
beta_lasso <- Variable(n_variant)
obj_lasso <- (sum_squares(y - X %*% beta_lasso) + 2 * t(t(X) %*% y-adjSC) %*% beta_lasso)/n + lambda0*p_norm(beta_lasso, 1)
prob <- Problem(Minimize(obj_lasso))
result <- CVXR::solve(prob)
beta_hat <- result[[1]]
}
return(beta_hat)
}
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE)
plot(a)
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=0, crit_obj=1e-8, quiet=FALSE)
plot(a)
b=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="CVX")
plot(b)
cc_ratio <- 0.01
n_ind <- nrow(genotype)
n_variant <- ncol(genotype)
temp <- generate_pheno(genotype,causal_rate,cc_ratio)
phenotype <- temp[[1]]
causal_index <- temp[[2]]
beta_orig <- rep(0,n_variant)
beta_orig[causal_index] <- 1
adjSC <- SC_adjust_or_not(genotype,phenotype,TRUE)
lambda0 = 100
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE)
plot(a)
b=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="CVX")
plot(b)
cc_ratio <- 0.1
n_ind <- nrow(genotype)
n_variant <- ncol(genotype)
temp <- generate_pheno(genotype,causal_rate,cc_ratio)
phenotype <- temp[[1]]
causal_index <- temp[[2]]
beta_orig <- rep(0,n_variant)
beta_orig[causal_index] <- 1
adjSC <- SC_adjust_or_not(genotype,phenotype,TRUE)
lambda0 = 100
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE)
plot(a)
b=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="CVX")
plot(b)
generate_pheno <- function(genotype,causal_rate,cc_ratio){
n_ind <- nrow(genotype)
n_variant <- ncol(genotype)
##### generate beta effect size #####
# causal_rate <- 0.1
causal_index <- sample(c(1:n_variant), ceiling(n_variant * causal_rate), replace = FALSE)
beta <- as.matrix(rep(0, n_variant))
beta[causal_index] <- 10
###### generate phenotype #####
# cc_ratio: the proportion of case
# cc_ratio <- 0.1
phenotype <- genotype %*% beta + rnorm(n_ind, 0, 0.3)
phenotype <- as.numeric(phenotype > sort(phenotype, decreasing = TRUE)[floor(n_ind * cc_ratio)])
phenotype <- as.matrix(phenotype)
colnames(phenotype) <- c("phe")
# # center the phenotype
# phenotype <- scale(phenotype, scale = FALSE)
return(list(phenotype,causal_index))
}
# ---our
###### generate phenotype #####
causal_rate <- 0.1
cc_ratio <- 0.5
n_ind <- nrow(genotype)
n_variant <- ncol(genotype)
temp <- generate_pheno(genotype,causal_rate,cc_ratio)
phenotype <- temp[[1]]
causal_index <- temp[[2]]
beta_orig <- rep(0,n_variant)
beta_orig[causal_index] <- 1
adjSC <- SC_adjust_or_not(genotype,phenotype,TRUE)
lambda0 = 100
b=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="CVX")
plot(b)
#' @param niter the maximum number of APGD to solve Lasso regression. default: 2000
#' @param crit_beta converge criterion of change of beta. default: 1e-4
#' @param crit_obj converge criterion of change of objective function. default: 1e-8
#' @param quiet decide if exist the output report. default: FALSE
#'
#' @return beta: m length vector of estimated effect sizes, where beta_j != 0 indicates j th SNP is selected in adjusted Lasso regression.
#' @export
#'
#' @examples
#'
adjLasso_Beta <- function(X, y, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE){
X <- data.matrix(X)
y <- data.matrix(y)
# ---- check X y
if (nrow(X) != nrow(y)){
stop("Error: Please check the sample size of X and y. They should be the same!")
} else if (ncol(y) != 1){
stop("Error: Please check the dimension of y. It should be n*1 vector!")
}
# ---- check lambda0
if (lambda0 <= 0){
stop("Error: Lambda shoud be lager than 0!")
}
# ---- check gamma
if (gamma <= 0){
stop("Error: Gamma shoud be lager than 0!")
}
# --- check method
if (method != "APGD" && method != "CVX"){
stop("Error: The current methods must be 'APGD' or 'CVX'!")
}
####### Setting:
n <- nrow(X)
p <- ncol(X)
if (quiet == FALSE){
print(paste("Start calculating beta using adjusted Lasso by :", method))
}
# - APGD
if (method == "APGD"){
beta_est <- matrix(NA, nrow = ncol(X), ncol = niter+2)
colnames(beta_est) <- paste("beta", seq(0, niter+1))
obj <- numeric(niter+1)
beta_est[,"beta 0"] <- beta_est[,"beta 1"] <- 0
for (k in 1:niter){
beta_k <- beta_est[,paste("beta", k)]
z <- y - X %*% beta_k
obj[k] <- sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_k + lambda0*sum(abs(beta_k))
ksi <- beta_est[,paste("beta", k)] + k/(k+3) * (beta_est[,paste("beta", k)] - beta_est[,paste("beta", k-1)])
g_grad_ksi <- 2*t(X) %*% X %*% ksi - 2*adjSC
g_grad_ksi <- data.matrix(g_grad_ksi)
while (TRUE){
theta <- ksi - gamma * g_grad_ksi
beta_prox <- sign(theta) * pmax(abs(theta)-gamma*lambda0, 0)
g_ksi <- sum((y - X %*% ksi)^2) + 2*(t(y)%*%X - t(adjSC))%*%ksi
g_beta_prox <- sum((y - X %*% beta_prox)^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox
g_hat_upper <- g_ksi + t(g_grad_ksi)%*%(beta_prox-ksi) + 0.5/gamma*sum((beta_prox-ksi)^2)
if (g_beta_prox <= g_hat_upper){
break
} else {
gamma <- 0.5*gamma
}
}
beta_est[,paste("beta", k+1)] <- beta_prox
z <- y - X %*% beta_prox
obj[k+1] <-  sum(z^2) + 2*(t(y)%*%X - t(adjSC))%*%beta_prox + lambda0*sum(abs(beta_prox))
diff_beta <- beta_prox - beta_est[,paste("beta", k)]
temp_beta <- (sum(abs(diff_beta) >= crit_beta) == 0)
temp_obj <- (abs(obj[k+1] - obj[k]) < crit_obj)
temp <- (1 - temp_beta) * (1 - temp_obj)
if (k>1 && temp==0){
break
}
}
if (k == niter){
print("Waining: Setting number of iterations doesn't reach to the convergency. Please set larger 'niter'!")
}
beta_hat <- beta_est[,k]
} else {   # - CVX
# if (!requireNamespace("CVXR", quietly = TRUE)) install.packages("CVXR")
library(CVXR)
n_variant <- ncol(X)
beta_lasso <- Variable(n_variant)
obj_lasso <- (sum_squares(y - X %*% beta_lasso) + 2 * t(t(X) %*% y-adjSC) %*% beta_lasso) + lambda0*p_norm(beta_lasso, 1)
prob <- Problem(Minimize(obj_lasso))
result <- CVXR::solve(prob)
beta_hat <- result[[1]]
}
return(beta_hat)
}
b=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="CVX")
plot(b)
a=adjLasso_Beta(genotype, phenotype, adjSC, lambda0, method="APGD",
gamma=1000, niter=2000, crit_beta=1e-4, crit_obj=1e-8, quiet=FALSE)
plot(a)
