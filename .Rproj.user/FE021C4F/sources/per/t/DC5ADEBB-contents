

library(BEDMatrix)
library(SPAtest)
library(CVXR)
library(caret)
library(R4RNA)

generate_pheno <- function(genotype,causal_rate,cc_ratio){

  n_ind <- nrow(genotype)
  n_variant <- ncol(genotype)

  ##### generate beta effect size #####
  # causal_rate <- 0.1
  causal_index <- sample(c(1:n_variant), ceiling(n_variant * causal_rate), replace = FALSE)
  beta <- as.matrix(rep(0, n_variant))
  beta[causal_index] <- 10

  ###### generate phenotype #####
  # cc_ratio: the proportion of case
  # cc_ratio <- 0.1
  phenotype <- genotype %*% beta + rnorm(n_ind, 0, 0.3)
  phenotype <- as.numeric(phenotype > sort(phenotype, decreasing = TRUE)[floor(n_ind * cc_ratio)])
  phenotype <- as.matrix(phenotype)
  colnames(phenotype) <- c("phe")
  # # center the phenotype
  # phenotype <- scale(phenotype, scale = FALSE)

  return(list(phenotype,causal_index))

}



### adjust_SC or not(x^t*y)
SC_adjust_or_not <- function(genotype,phenotype,is_adjust_SC){

  n_ind <- nrow(genotype)
  n_variant <- ncol(genotype)

  if (is_adjust_SC==TRUE) {

    #calculate the pvalue through SPA
    p_value <- SPAtest:::ScoreTest_SPA(genos = t(genotype), pheno = phenotype,method = "SPA")$p.value
    #calculate adjust_SC
    nxy <- n_ind * apply(genotype,2,mean) * mean(phenotype)
    sign_SC <- sign(t(genotype) %*% phenotype - nxy)
    sigma <- sqrt(sum((phenotype-mean(phenotype))^2) * apply(genotype,2,FUN = function(x){sum((x-mean(x))^2)})/n_ind)
    adj_SC<- sign_SC * sigma * sqrt(qchisq(p = p_value,df = 1, lower.tail = FALSE)) + nxy
    output <- adj_SC

  }else{
    output <-t(genotype) %*% phenotype
  }

  return(output)
}

# adj_SC_no<-SC_adjust_or_not(genotype,phenotype, FALSE )

##### estimate beta #####
# Lasso
cvx_lasso <- function(genotype,phenotype,adj_SC_no,lambda0){

  n_variant <- ncol(genotype)
  beta_lasso <- Variable(n_variant)

  # obj_lasso <- t(phenotype) %*% phenotype + quad_form(beta_lasso, t(genotype) %*% genotype) -  2 * t(adj_SC_no) %*% beta_lasso + lambda0*p_norm(beta_lasso, 1)
  # obj_lasso <- sum_squares(phenotype - genotype %*% beta_lasso) + lambda0*p_norm(beta_lasso, 1)
  obj_lasso <- sum_squares(phenotype - genotype %*% beta_lasso) + 2 * t(t(genotype) %*% phenotype-adj_SC_no) %*% beta_lasso + lambda0*p_norm(beta_lasso, 1)
  prob <- Problem(Minimize(obj_lasso))
  result <- CVXR::solve(prob)
  beta_hat_lasso <- result[[1]]
  # y_hat <- genotype %*% beta_hat_lasso
  return(beta_hat_lasso)

}


#Elastic Net
cvx_en <- function(genotype,phenotype,adj_SC_no,alpha0,lambda0){
  # alpha0 <- 1
  # lambda0 <- 2000
  n_variant <- ncol(genotype)
  beta_en <- Variable(n_variant)
  # obj_en <- t(phenotype) %*% phenotype + quad_form(beta_en, t(genotype) %*% genotype) -  2 * t(adj_SC_no) %*% beta_en + lambda0*alpha0*p_norm(beta_en, 1) + 0.5*lambda0*(1-alpha0)*sum(beta_en^2)
  obj_en <- sum_squares(phenotype - genotype %*% beta_en) + 2 * t(t(genotype) %*% phenotype-adj_SC_no) %*% beta_en + lambda0*alpha0*p_norm(beta_en, 1) + 0.5*lambda0*(1-alpha0)*sum(beta_en^2)
  prob <- Problem(Minimize(obj_en))
  result <- CVXR::solve(prob)
  beta_hat_en <- result[[1]]
  # y_hat <- genotype %*% beta_hat_en
  return(beta_hat_en)

}


##### cross validation: Split the data into a training and test set with an 80/20 split

cv_model <- function(genotype,phenotype,model,alpha_all,is_adjust_SC,metric){
  # model <- c("EN")

  n_ind <- nrow(genotype)
  n_variant <- ncol(genotype)
  ge_phe <- cbind(genotype,phenotype)

  random_sample <- createDataPartition(phenotype,p = 0.8, list = FALSE)
  training_dataset  <- ge_phe[random_sample, ]
  testing_dataset <- ge_phe[-random_sample, ]
  adj_SC_no <- SC_adjust_or_not(training_dataset[,-(n_variant+1)],training_dataset[,(n_variant+1)],is_adjust_SC)

  metrics_save <- data.frame(matrix(NA,nrow = 0,ncol = 7))
  colnames(metrics_save) <- c("model","adjust_SC","alpha","lambda","R2","RMSE","MAE")
  if (model=="Lasso") {
    alpha0 <- 1
    lambda_max <- max(abs(2*adj_SC_no))/alpha0
    number_lambda <- 10
    lambda_all <- R4RNA::logseq(lambda_max/100,lambda_max,number_lambda)
    for (i in 1:length(lambda_all)) {

      beta_lasso <- cvx_lasso(training_dataset[,-(n_variant+1)],training_dataset[,(n_variant+1)],adj_SC_no,lambda_all[i])
      predictions <- testing_dataset[,-(n_variant+1)] %*% beta_lasso

      # computing model performance metrics
      Metrics <- c(R2(predictions, testing_dataset[,(n_variant+1)]),
                   RMSE(predictions, testing_dataset[,(n_variant+1)]),
                   MAE(predictions, testing_dataset[,(n_variant+1)]))
      temp <- data.frame(matrix(NA,nrow = 1,ncol = 7))

      temp[1,1:2] <- c(model,is_adjust_SC)
      temp[1,3:7] <- c(NA,lambda_all[i],Metrics)
      metrics_save <- rbind(metrics_save,temp)
    }
  }else{
    for (k in 1:length(alpha_all)) {
      alpha0 <- alpha_all[k]
      lambda_max <- max(abs(2*adj_SC_no))/alpha0
      number_lambda <- 10
      lambda_all <- R4RNA::logseq(lambda_max/100,lambda_max,number_lambda)
      for (j in 1:length(lambda_all)) {

        beta_en <- cvx_en(training_dataset[,-(n_variant+1)],training_dataset[,(n_variant+1)],adj_SC_no,alpha_all[k],lambda_all[j])
        predictions <- testing_dataset[,-(n_variant+1)] %*% beta_en

        # computing model performance metrics
        Metrics <- c(R2(predictions, testing_dataset[,(n_variant+1)]),
                     RMSE(predictions, testing_dataset[,(n_variant+1)]),
                     MAE(predictions, testing_dataset[,(n_variant+1)]))
        temp <- data.frame(matrix(NA,nrow = 1,ncol = 7))

        temp[1,1:2] <- c(model,is_adjust_SC)
        temp[1,3:7] <- c(alpha_all[k],lambda_all[j],Metrics)
        metrics_save <- rbind(metrics_save,temp)
      }
    }
  }
  colnames(metrics_save) <- c("model","adjust_SC","alpha","lambda","R2","RMSE","MAE")
  if (metric=="R2") {
    temp_index <- which(colnames(metrics_save)==metric)
    select_tunning <- metrics_save[which(metrics_save[,temp_index]==max(metrics_save[,temp_index]))[1],]
  }else{
    temp_index <- which(colnames(metrics_save)==metric)
    select_tunning <- metrics_save[which(metrics_save[,temp_index]==min(metrics_save[,temp_index]))[1],]
  }

  return(list(metrics_save,select_tunning))
}

























# g1<-genotype[,1]
# sigma1<-sum((phenotype-mean(phenotype))^2)*sum((g1-mean(g1))^2)/n_ind
#
# SC <- t(genotype) %*% phenotype - nxy
# aa<- t(genotype) %*% phenotype
# pp<-pchisq(SC^2/sigma^2, 1,lower.tail = FALSE)
# hist(pp[causal_index])
#
# corrrr<-cor(genotype,phenotype)
# pp<-pchisq(n_ind*corrrr^2, 1,lower.tail = FALSE)
# b<-n_ind*corrrr^2*sigma
# b[1]
# SC[1]^2
